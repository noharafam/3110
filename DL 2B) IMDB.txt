1. import numpy as np
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.datasets import imdb
from tensorflow.keras.preprocessing import sequence


2. # Set parameters for loading the dataset
max_features = 10000  # Consider only the top 10,000 most frequently occurring words
maxlen = 200  # Cut reviews after 200 words
batch_size = 32


3. # Load the IMDB dataset
(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=max_features)

4. # Pad sequences to ensure uniform length for input to the neural network
x_train = sequence.pad_sequences(x_train, maxlen=maxlen)
x_test = sequence.pad_sequences(x_test, maxlen=maxlen)

5. # Define the model
model = models.Sequential([
    layers.Embedding(max_features, 128, input_length=maxlen),
    layers.Conv1D(64, 5, activation='relu'),
    layers.MaxPooling1D(4),
    layers.Conv1D(64, 5, activation='relu'),
    layers.MaxPooling1D(4),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(1, activation='sigmoid')  # Output layer for binary classification
])


6. # Compile the model
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])


7. # Train the model
model.fit(x_train, y_train, epochs=4, batch_size=batch_size, validation_data=(x_test, y_test))


# Evaluate the model
test_loss, test_acc = model.evaluate(x_test, y_test)
print('Test accuracy:', test_acc)


import numpy as np
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.datasets import imdb  # Add this import to access the word index

# Set parameters
maxlen = 200  # Assuming the same maxlen used during training

# Function to preprocess review text
def preprocess_review(review_text):
    # Load the IMDB word index
    word_index = imdb.get_word_index()
    # Tokenize the review text and handle unknown words
    review_sequence = [word_index.get(word.lower(), 0) for word in review_text.split()]
    # Pad the sequence to match the desired input length
    review_sequence_padded = pad_sequences([review_sequence], maxlen=maxlen)
    return review_sequence_padded

# Example review text
review_text = "I didn't like the movie it was waste of time."

# Preprocess the review text
preprocessed_review = preprocess_review(review_text)

# Make predictions
prediction = model.predict(preprocessed_review)[0][0]

# Interpret the prediction
sentiment = "Positive" if prediction > 0.5 else "Negative"

# Output the result
print("Review:", review_text)
print("Predicted sentiment:", sentiment)
